<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023.5.30-python复习笔记【更新ing】</title>
    <link href="/2023/05/30/2023.5.30-python%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/30/2023.5.30-python%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>记录python复习的笔记，观看b站小甲鱼的<a href="https://www.bilibili.com/video/BV1c4411e77t">《零基础入门学习Python》最新版</a>，倍速刷过一遍，记录一些遗忘的知识点。</p><span id="more"></span><h1 id="2023-5-30-python复习笔记"><a href="#2023-5-30-python复习笔记" class="headerlink" title="2023.5.30-python复习笔记"></a>2023.5.30-python复习笔记</h1><p>[toc]</p><h2 id="一、变量和字符串"><a href="#一、变量和字符串" class="headerlink" title="一、变量和字符串"></a>一、变量和字符串</h2><h3 id="1、变量交换"><a href="#1、变量交换" class="headerlink" title="1、变量交换"></a>1、变量交换</h3><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230601104856188.png" alt="image-20230601104856188"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x=<span class="hljs-number">3</span><br>y=<span class="hljs-number">5</span><br><span class="hljs-comment">#交还x，y的值</span><br>x,y = y,x<br></code></pre></td></tr></table></figure><h3 id="2、随机数-random"><a href="#2、随机数-random" class="headerlink" title="2、随机数 random"></a>2、随机数 random</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">random.random()<span class="hljs-comment">#返回一个随机数</span><br>random.randint(a,b)<span class="hljs-comment">#返回一个a到b之间的随机数</span><br>x=random.getstate()<span class="hljs-comment">#获取随机数种子</span><br>random.setstate(x)<span class="hljs-comment">#设置随机数种子</span><br></code></pre></td></tr></table></figure><p>获取了随机数种子，可实现伪随机数攻击。</p><h3 id="3、数字类型"><a href="#3、数字类型" class="headerlink" title="3、数字类型"></a>3、数字类型</h3><p>python的浮点数表示存在误差</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230601113642517.png" alt="image-20230601113642517"></p><p>用decimal库可以强制精确小数。</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230601114040628.png" alt="image-20230601114040628"></p><p><strong>科学计数法</strong>：如下图，e-05表示10的负5次方，即5*10^-5^。</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230601114110681.png" alt="image-20230601114110681"></p><h3 id="4、计算符号"><a href="#4、计算符号" class="headerlink" title="4、计算符号"></a>4、计算符号</h3><p>算数除法：<code>\</code></p><p>向下取整：<code>\\</code></p><p>取模：<code>%</code></p><p>求绝对值：<code>abs(x)</code></p><p><code>divmod(a,b)</code>： 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a &#x2F;&#x2F; b, a % b)。</p><p>幂运算：<code>a**b</code>，a的b次方；</p><p><code>pow(a,b)</code>，a的b次方；</p><p><code>pow(a,b,c)</code>：a的b次方 再求c的模。</p><p><strong>逻辑运算符号</strong>：<code>and</code> ，<code>or</code>，<code>not</code>：与或非</p><h2 id="二、分支和循环"><a href="#二、分支和循环" class="headerlink" title="二、分支和循环"></a>二、分支和循环</h2><h3 id="1、分支结构"><a href="#1、分支结构" class="headerlink" title="1、分支结构"></a>1、分支结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> condition1:<br>    <span class="hljs-comment">#分之一</span><br><span class="hljs-keyword">elif</span> condition2:<br>    <span class="hljs-comment">#分支二</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment">#分之三</span><br></code></pre></td></tr></table></figure><p>求最大值、最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">3</span><br>b=<span class="hljs-number">5</span><br>small=a <span class="hljs-keyword">if</span> a&lt;b <span class="hljs-keyword">else</span> b<span class="hljs-comment">#如果a&lt;b则small=a，否则small=b</span><br>big=a <span class="hljs-keyword">if</span> a&gt;b <span class="hljs-keyword">else</span> b<span class="hljs-comment">#如果a&gt;b则max=a，否则big=b</span><br></code></pre></td></tr></table></figure><p>简写多行分支</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-number">60</span><br>l = (<span class="hljs-string">&#x27;D&#x27;</span> <span class="hljs-keyword">if</span> <span class="hljs-number">0</span>&lt;=s&lt;<span class="hljs-number">60</span> <span class="hljs-keyword">else</span><br>     <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">if</span> s&lt;<span class="hljs-number">70</span> <span class="hljs-keyword">else</span><br>     <span class="hljs-string">&#x27;B&#x27;</span> <span class="hljs-keyword">if</span> s&lt;<span class="hljs-number">80</span> <span class="hljs-keyword">else</span><br>     <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">if</span> s&lt;<span class="hljs-number">100</span> <span class="hljs-keyword">else</span><br>     <span class="hljs-string">&#x27;S&#x27;</span> <span class="hljs-keyword">if</span> s==<span class="hljs-number">100</span> <span class="hljs-keyword">else</span><br>     <span class="hljs-string">&quot;请输入0~100之间的数&quot;</span>)<br>l<br><span class="hljs-string">&#x27;C&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2、while循环结构"><a href="#2、while循环结构" class="headerlink" title="2、while循环结构"></a>2、while循环结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> condition:<br>    <span class="hljs-comment">#循环</span><br>    <br><span class="hljs-keyword">break</span><span class="hljs-comment">#退出循环</span><br><span class="hljs-keyword">continue</span><span class="hljs-comment">#结束此轮循环，进入下一轮循环.</span><br><br></code></pre></td></tr></table></figure><p>注意<code>else</code>可以接在while语句后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">i=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i&lt;=<span class="hljs-number">7</span>:<br>    a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;今天有好好学习嘛?&quot;</span>)<br>    <span class="hljs-keyword">if</span> a!=<span class="hljs-string">&#x27;有&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br>    i+=<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已经学习7天了！真棒&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3、for循环结构"><a href="#3、for循环结构" class="headerlink" title="3、for循环结构"></a>3、for循环结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 可迭代对象<br><span class="hljs-comment">#例如</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Fish&quot;</span>:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment">#打印如下：   </span><br>F<br>i<br>s<br>h<br></code></pre></td></tr></table></figure><p><code>range</code>函数用法</p><blockquote><p>range(stop)</p><p>range(start, stop)</p><p>range(start, stop, step)</p></blockquote><p><strong>包含start，不包含stop</strong>，注意，当<code>step</code>为负数时，表示<strong>逆序</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment">#打印</span><br><span class="hljs-number">0</span><br><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">9</span><br><span class="hljs-comment">#例子</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n):<br>        <span class="hljs-keyword">if</span> n%x==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>,n//x)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(n,<span class="hljs-string">&quot;是一个素数&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><h3 id="1、列表切片"><a href="#1、列表切片" class="headerlink" title="1、列表切片"></a>1、列表切片</h3><p>类似C语言数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-string">&quot;123456&quot;</span>]<br>a[start:end:step]<br><span class="hljs-comment">#包含start，不包含end。注意：start表示下标，从0开始。</span><br></code></pre></td></tr></table></figure><p>注意，当<code>step</code>为负数时，表示<strong>逆序</strong>。</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230602171818673.png" alt="image-20230602171818673"></p><h3 id="2、列表-增删查改"><a href="#2、列表-增删查改" class="headerlink" title="2、列表-增删查改"></a>2、列表-增删查改</h3><p><strong>末尾</strong>增加一个元素：<code>a.append(一个可迭代对象)</code></p><p><strong>末尾</strong>增加多个元素：<code>a.extend([增加列表])</code>、<code>a.[len(a):]=[增加列表]</code></p><p><strong>指定位置</strong>插入：<code>a.insert(position,value)</code></p><p>删除<strong>指定元素</strong>：<code>a.remove(value)</code>，如果没有value值，则报错</p><p>删除<strong>指定位置</strong>：<code>a.pop(position)</code></p><p>清空列表：<code>a.clear()</code></p><p>单个替换：<code>a[1]=value</code></p><p>多个替换：<code>a[6:]=[列表]</code>，从第6个后面全部替换为<strong>列表</strong>。</p><p><strong>从小到大</strong>排序：<code>a.sort()</code></p><p>逆序列表：<code>a.reverse()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.sort(self,key=<span class="hljs-literal">None</span>,reverse=<span class="hljs-literal">False</span>)<span class="hljs-comment">#对原列表进行排序</span><br></code></pre></td></tr></table></figure><p>计数：<code>a.count(value)</code>，返回列表a中value值的个数</p><p>返回值的下表：<code>a.index(value)</code>，只返回value第一次出现的下表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a[a.index(value1)] = value2<span class="hljs-comment">#将value1替换为value2</span><br>a.index(value,start,end)<span class="hljs-comment">#从下标start开始到end下标，查找value</span><br></code></pre></td></tr></table></figure><p>复制一整个列表：<code>b = a.copy()</code>等价与<code>b=a[:]</code></p><blockquote><p> 不等价于<code>b=a</code></p><p><code>b=a.copy()</code>，b是复制到一个独立的内存，而<code>c=a</code>，表示c指向a的内存，只是一个引用。</p><p>但注意，这个“独立”，只适用于一维数组，无法对二维、三维……之后的数据进行复制，还是原引用。（浅拷贝与深拷贝的关系。）</p></blockquote><h3 id="3、二维列表"><a href="#3、二维列表" class="headerlink" title="3、二维列表"></a>3、二维列表</h3><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230603154155014.png" alt="image-20230603154155014"></p><p>初始化一个二维列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#正确方法</span><br>A=[<span class="hljs-number">0</span>]*<span class="hljs-number">3</span> <span class="hljs-comment">#A=[0, 0, 0]</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    A[i]=[<span class="hljs-number">0</span>]*<span class="hljs-number">3</span><br><span class="hljs-comment">#A=[[0, 0, 0],[0, 0, 0],[0, 0, 0]]</span><br><br><span class="hljs-comment">#错误方法</span><br>B=[[<span class="hljs-number">0</span>]*<span class="hljs-number">3</span>]*<span class="hljs-number">3</span><span class="hljs-comment">#B=[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span><br></code></pre></td></tr></table></figure><p>两种列表初始化方法，其内存布局是不同的。</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230603155914807.png" alt="image-20230603155914807"></p><h3 id="4、浅拷贝与深拷贝"><a href="#4、浅拷贝与深拷贝" class="headerlink" title="4、浅拷贝与深拷贝"></a>4、浅拷贝与深拷贝</h3><p>当列表为二维及以上的列表是，则需要考虑是否用深拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br></code></pre></td></tr></table></figure><p>列表y<strong>浅拷贝</strong>x列表，则修改y列表，同时x列表也会被修改。</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230603162648014.png" alt="image-20230603162648014"></p><p>列表z<strong>深拷贝</strong>x列表，则修改z列表，不会修改x列表。</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230603162908911.png" alt="image-20230603162908911"></p><blockquote><p>python<strong>默认是浅拷贝</strong>。</p></blockquote><h3 id="5、列表推导式"><a href="#5、列表推导式" class="headerlink" title="5、列表推导式"></a>5、列表推导式</h3><p>直接创建一个新的列表，再复制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">oho<br>&gt;&gt;&gt;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>oho = [i*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> oho]<br>oho<br>&gt;&gt;&gt;[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">code = [<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;FishC&quot;</span>]<br>code<br>&gt;&gt;&gt;[<span class="hljs-number">70</span>, <span class="hljs-number">105</span>, <span class="hljs-number">115</span>, <span class="hljs-number">104</span>, <span class="hljs-number">67</span>]<br></code></pre></td></tr></table></figure><p>内置函数：<code>ord(c)</code>：将单个字符转换成编码（ASCLL）。</p><p><strong>矩阵操作</strong>：取二维矩阵某一列的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">martrix = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>           [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],<br>           [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br>col2 = [row[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> martrix]<br>col2<br>&gt;&gt;&gt;[<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><p>为列表推导式，添加<code>if</code>条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#初始化一个0~10之间的偶数序列</span><br>even = [ i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>]<br>even<br>&gt;&gt;&gt;[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><p>列表推导式的<strong>嵌套循环</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#例1</span><br>martrix<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<br>flatten=[col <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> martrix <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> row]<br>flatten<br>&gt;&gt;&gt;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br><br><span class="hljs-comment">#例2</span><br>a = [x*y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>) ]<br>a<br>&gt;&gt;&gt;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>]<br></code></pre></td></tr></table></figure><p>高阶嵌套循环</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230611153138620.png" alt="image-20230611153138620"></p><h3 id="6、元组-tuple"><a href="#6、元组-tuple" class="headerlink" title="6、元组 tuple"></a>6、元组 tuple</h3><p>元组不可变，<strong>不能修改自身</strong>。</p><p>元组的声明：</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230618195321912.png" alt="image-20230618195321912"></p><p>支持查找和切片，不支持修改。</p><p>也支持<strong>迭代</strong>。</p><p>元组的<strong>打包</strong>和<strong>解包</strong>。注意解包是，等式左右两端变量数量相等。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230618195713320.png" alt="image-20230618195713320" style="zoom: 50%;"><h2 id="四、字符串"><a href="#四、字符串" class="headerlink" title="四、字符串"></a>四、字符串</h2><h3 id="1、字符串基本处理"><a href="#1、字符串基本处理" class="headerlink" title="1、字符串基本处理"></a>1、字符串基本处理</h3><p>字符串同样是不可变对象，所有方法都是在原基础上生成新字符串。</p><p>字符串同样<strong>支持切片</strong></p><img src="https://gitee.com/cht1/Image/raw/master/image-20230618210900684.png" alt="image-20230618210900684" style="zoom:50%;"><p>字符串单词处理的一些基本方法</p><table><thead><tr><th>字符串方法</th><th>大致意义</th></tr></thead><tbody><tr><td>x.capitalize()</td><td>使一串单词的首字母大写</td></tr><tr><td>x.casefold()</td><td>使所有单词变为小写（与lower方法略微不同）</td></tr><tr><td>x.title()</td><td>使一串单词中每个单词的手写字母大写</td></tr><tr><td>x.swapcase()</td><td>反转字符串中所有字母的大小写</td></tr><tr><td>x.upper()</td><td>使所有单词大写</td></tr><tr><td>x.lower()</td><td>使所有单词小写</td></tr></tbody></table><img src="https://gitee.com/cht1/Image/raw/master/image-20230618211844698.png" alt="image-20230618211844698" style="zoom: 50%;"><table><thead><tr><th>字符串方法</th><th>大致意义</th></tr></thead><tbody><tr><td>x.center(n,char)</td><td>使字符串居中对其n个字符，空白填充char字符，默认空格</td></tr><tr><td>x.ljust(n,char)</td><td>同上，实现左对齐</td></tr><tr><td>x.rjust(n,char)</td><td>同上，实现右对齐</td></tr><tr><td>s.zfill(n)</td><td>用0填充左侧实现对其n</td></tr></tbody></table><img src="https://gitee.com/cht1/Image/raw/master/image-20230618212424681.png" alt="image-20230618212424681" style="zoom:50%;"><h3 id="2、字符串操作"><a href="#2、字符串操作" class="headerlink" title="2、字符串操作"></a>2、字符串操作</h3><ol><li>查找操作</li></ol><table><thead><tr><th>查找操作</th><th></th></tr></thead><tbody><tr><td>x.count(char,start,end)</td><td>从字符串下标start到end，查找字符char</td></tr><tr><td>x.find(char)</td><td>从左往右查找字符，返回下标，不存在则返回-1</td></tr><tr><td>x.rfind(char)</td><td>从右往左查找</td></tr><tr><td>x.index(char)</td><td>从左往右查找字符，返回首字母下标，不存在则抛出<strong>异常</strong></td></tr></tbody></table><ol start="2"><li>替换操作</li></ol><table><thead><tr><th>替换操作</th><th></th></tr></thead><tbody><tr><td>x.expandtabs(k)</td><td>将字符串中的每个tab字符替换为k个空格。</td></tr><tr><td>x.replace(a,b)</td><td>将x字符串中的a字符串替换为b字符串</td></tr><tr><td>table &#x3D; x.maketrans(a,b)</td><td>返回一个，将等长的字符串a、b一一对应的table表</td></tr><tr><td>str.translate(table)</td><td>用上面的table表，替换str字符串。</td></tr></tbody></table><img src="https://gitee.com/cht1/Image/raw/master/image-20230629214140053.png" alt="image-20230629214140053" style="zoom:50%;"><p><code>x.maketrans(a,b,c)</code>支持第三个参数c，可以将字符串c中的所有字符替换为空None。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230629214854629.png" alt="image-20230629214854629" style="zoom:50%;"><p>一些其他方法</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230629224123104.png" alt="image-20230629224123104" style="zoom:67%;"><p>等等，太多了，记不完。。</p><ol start="3"><li>关键方法</li></ol><p><code>str.join(s)</code>：遍历字符串str，为每个字符后面添加字符串s，（s若一个列表，则拼接起来）</p><p><code>format()</code>方法，格式化输出字符串</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230629231410611.png" alt="image-20230629231410611" style="zoom:50%;"><img src="https://gitee.com/cht1/Image/raw/master/image-20230629231454779.png" alt="image-20230629231454779" style="zoom:50%;"><p>格式化输出数字：二进制、八进制、十进制</p><img src="../../../../../AppData/Roaming/Typora/typora-user-images/image-20230629231935943.png" alt="image-20230629231935817" style="zoom:50%;"><p>f字符串</p><img src="../../../../../AppData/Roaming/Typora/typora-user-images/image-20230629232519360.png" alt="image-20230629232519360" style="zoom:50%;"><h2 id="五、序列"><a href="#五、序列" class="headerlink" title="五、序列"></a>五、序列</h2><h3 id="1、序列基础"><a href="#1、序列基础" class="headerlink" title="1、序列基础"></a>1、序列基础</h3><p>序列分为<strong>可变序列</strong>（列表）和<strong>不可变序列</strong>（元组、字符串）</p><p><code>id()</code>方法，返回一个对象的唯一标识，一个整形的id值。</p><p><strong>基础运算符</strong>：</p><p><code>is</code>和<code>is not</code>判断两个变量是否为同一对象。</p><p><code>in</code>和<code>not in</code>判断一个对象是否包含在另一个对象内</p><h3 id="2、列表、元组、字符串相互转换"><a href="#2、列表、元组、字符串相互转换" class="headerlink" title="2、列表、元组、字符串相互转换"></a>2、列表、元组、字符串相互转换</h3><table><thead><tr><th>列表、元组、字符串相互转换</th><th></th><th>初始化：a列表、b元组、c字符串<br><img src="../../../../../AppData/Roaming/Typora/typora-user-images/image-20230702164554408.png" alt="image-20230702164554408" style="zoom:50%;"></th></tr></thead><tbody><tr><td><strong>可迭代对象</strong>（字符串、元组）<strong>转列表</strong>：</td><td><code>list()</code></td><td>注意：字符串转列表后，依然是单个字符，而非值<br><img src="https://gitee.com/cht1/Image/raw/master/image-20230702164832341.png" alt="image-20230702164832341" style="zoom:50%;"></td></tr><tr><td>可迭代对象<strong>转元组</strong>：</td><td><code>tuple()</code></td><td>注意：字符串转元组后，依然是单个字符<br><img src="https://gitee.com/cht1/Image/raw/master/image-20230702164946947.png" alt="image-20230702164946947" style="zoom:50%;"></td></tr><tr><td>可迭代对象<strong>转字符串</strong>：</td><td><code>str()</code></td><td>注意：连符号也一同转换（列表的框框<code>[]</code>还存在）<br><img src="https://gitee.com/cht1/Image/raw/master/image-20230702165051907.png" alt="image-20230702165051907" style="zoom:50%;"></td></tr></tbody></table><p><strong>基础方法：</strong>参数为可迭代对象。</p><p><code>min()</code>：可设置参数default&#x3D;”“，表示空对象时默认输出。</p><p><code>max()</code>：</p><p><code>len()</code>：</p><p><code>sorted()</code>：注意：该方法参数可以是列表、元组、字符串，但返回的是一个全新的<strong>列表</strong>，原对象并未改变（与列表自带方法<code>x.sort()</code>不同）。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702165930344.png" alt="image-20230702165930344" style="zoom:50%;"><img src="https://gitee.com/cht1/Image/raw/master/image-20230702170551291.png" alt="image-20230702170551291" style="zoom:50%;"><p><code>reversed()</code>：同上，返回结果是一个<code>迭代器</code>，即一个地址，需要用<strong>list</strong>方法（<strong>tuple</strong>方法也可以）显示。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702170646881.png" alt="image-20230702170646881" style="zoom:50%;"><h3 id="3、序列-其他"><a href="#3、序列-其他" class="headerlink" title="3、序列-其他"></a>3、序列-其他</h3><p><code>enumerate()</code>：函数用于返回一个枚举对象，它的功能就是将可迭代对象中的每个元素及从start（默认为0）开始的序号共同构成一个<strong>二元组</strong>的列表。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702171723459.png" alt="image-20230702171723459" style="zoom:50%;"><p><code>zip()</code>：函数用于创建一个聚合多个可迭代对象的<strong>迭代器</strong>（返回）。它会将作为参数传入的<strong>每个可迭代对象的每个元素</strong>依次组合成元组，即第i个元组包含来自每个参数的第i个元素。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702171947542.png" alt="image-20230702171947542" style="zoom:50%;"><p><code>map()</code>：函数会<strong>根据提供的函数</strong>对指定的可迭代对象的每个元素进行运算,并将<strong>返回运算结果的迭代器</strong>。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702172552279.png" alt="image-20230702172552279" style="zoom:50%;"><p><code>filter()</code>：函数会<strong>根据提供的函数</strong>对指定的可迭代对象的每个元素进行运算,并<strong>将运算结果为真的元素</strong>,以迭代器的形式返回。</p><p>与<code>map()</code>不同的是，只保留运算结果为真的元素。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702215820917.png" alt="image-20230702215820917" style="zoom:50%;"><h3 id="4、可迭代对象-vs-迭代器"><a href="#4、可迭代对象-vs-迭代器" class="headerlink" title="4、可迭代对象 vs 迭代器"></a>4、可迭代对象 vs 迭代器</h3><p>可迭代对象：列表、元组、字符串这些，可以重复使用</p><p>迭代器：只可使用一次，用完之后则变为空。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702220315013.png" alt="image-20230702220315013" style="zoom:50%;"><p><code>iter()</code>：该方法将一个可迭代对象转换为一个迭代器。</p><p>可以通过<code>next()</code>方法，每次从迭代器中取一个元素，同样包含可选的<code>default</code>参数。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702220616175.png" alt="image-20230702220616175" style="zoom:50%;"><h2 id="六、字典、集合、函数"><a href="#六、字典、集合、函数" class="headerlink" title="六、字典、集合、函数"></a>六、字典、集合、函数</h2><h3 id="1、字典"><a href="#1、字典" class="headerlink" title="1、字典"></a>1、字典</h3><p>字典：python中唯一实现<strong>映射关系</strong>的内置类型。使用方法：x&#x3D;{键:值，键:值，……}</p><p>键不可重复，重复则覆盖原始键对应的值。</p><p>6种字典创建方式：</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702223556511.png" alt="image-20230702223556511" style="zoom:50%;"><p><code>fromkeys(iterable[, values])</code>：快速创建一个所有键的值都为value的字典（value默认为None）。</p><p><strong>新增</strong>或<strong>更改</strong>键值对：直接定义即可。</p><p><code>pop(key[, default])</code>：该方法<strong>删除</strong>字典中对应键key。</p><p><code>popitem()</code>，python3.7之前，随机删除一个键值对，python3.7之后，删除最后一个加入列表的键值对。</p><p><code>del</code>关键字，可用于删除字典的指定键，如<code>del d[&quot;i&quot;]</code></p><p><code>d.clear()</code>该方法删除字典<code>d</code>中的所有键值对，使其变为一个空字典。</p><p><code>d.update([other])</code>：<strong>更新</strong>字典，参数为一个字典或者键值对。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702231101806.png" alt="image-20230702231101806" style="zoom:50%;"><img src="https://gitee.com/cht1/Image/raw/master/image-20230702231212915.png" alt="image-20230702231212915" style="zoom:50%;"><p><code>d.get(key[, default])</code>：get方法返回字典d中对应键为key的值。</p><p><code>setdefault(key[, default])</code>：查找并返回字典中key键对应的值，若不存在，则新增键值对key&#x3D;default。</p><p><code>d.items(),d.keys(),d.values()</code>：分别返回字典的键值对、键、值对应的字典视图对象，当字典键值对发生变化是，视图对象全部发生变化。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702232216746.png" alt="image-20230702232216746" style="zoom:50%;"><p>字典的浅拷贝、求字典元素个数、判断是否存在：</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702232352639.png" alt="image-20230702232352639" style="zoom:50%;"><p>字典<strong>转列表</strong>：</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702232515551.png" alt="image-20230702232515551" style="zoom:50%;"><p>字典也可以<strong>嵌套</strong>，可以嵌套一个字典，也可以嵌套一个序列。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702232757727.png" alt="image-20230702232757727" style="zoom:50%;"><p><strong>字典推导式</strong>，类似于<strong>列表推导式</strong>：</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230702233208389.png" alt="image-20230702233208389" style="zoom:50%;"><blockquote><p>d&#x3D;{x:ord(x) for x in “FishC”}#获取字符串对应ascll码的键值对。</p></blockquote><h3 id="2、集合"><a href="#2、集合" class="headerlink" title="2、集合"></a>2、集合</h3><p>集合，与字典类似，意义于数学上定义类似。定义方法为：<code>x=&#123;value_1,value_2,value_3, ...&#125;</code>，数据类型为<code>set</code></p><p>操作方法也与字典类似，<strong>注意</strong>：集合具有<strong>无序性</strong>，即不存在下标。</p><img src="../../../../../AppData/Roaming/Typora/typora-user-images/image-20230703192641702.png" alt="image-20230703192641702" style="zoom:50%;"><p><strong>重点</strong>：集合具有<strong>唯一性</strong>，也就是集合中的元素只会出现一遍。</p><blockquote><p>将具有重复元素的列表转为集合，会去重。</p><p>判断列表s是否具有重复元素：if len(s) &#x3D;! len(set(s))</p></blockquote><p>集合基本判断：子集<code>&lt;</code>、真子集<code>&lt;=</code>、超集<code>&gt;</code>、真超集<code>&gt;=</code>、交集<code>&amp;</code>、并集<code>|</code>、差集<code>-</code>、对称差集<code>^</code>。</p><p>集合分为<strong>可变集合</strong><code>set()</code>与<strong>不可变集合</strong><code>frozenset()</code>。</p><p>可变集合可用<code>update(可迭代对象)</code>方法进行更新（单增），</p><p>使用<code>add(字符串s)</code>，将字符串s作为整体添加到集合；</p><p>用<code>remove(x)</code>方法指定删除元素， 若不存在则报错，而<code>discard(x)</code>方法是静默删除；</p><p>用<code>pop()</code>方法随机删除一个元素，<code>clear()</code>方法将集合清零。</p><p>集合的交集、差集、对称差集方法：</p><p><img src="https://gitee.com/cht1/Image/raw/master/image-20230703200041729.png" alt="image-20230703200041729"></p><p><code>hash(不可变对象)</code>：获取一个不可变对象（列表为可变对象）的哈希值。</p><p>集合<strong>不可嵌套</strong>，除非初始化为<code>frozenset()</code></p><img src="https://gitee.com/cht1/Image/raw/master/image-20230703201506665.png" alt="image-20230703201506665" style="zoom:50%;"><p><strong>重点！！！</strong>：集合的低沉查找为<strong>散列查找</strong>，查找速度快于列表，但是牺牲内存（以空间换时间）。</p><h3 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h3><h4 id="（1）函数参数传入方式"><a href="#（1）函数参数传入方式" class="headerlink" title="（1）函数参数传入方式"></a>（1）函数参数传入方式</h4><p>函数的定义：<strong>函数名</strong>、<strong>参数</strong>（形参实参）、<strong>返回值</strong>。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230703225546014.png" alt="image-20230703225546014" style="zoom:50%;"><p>上图为<strong>①位置参数</strong>，</p><p><strong>②关键字参数</strong>：调用函数时规定具体形参的传入值，可乱序</p><p>位置参数和关键参数可同时使用，但是位置参数必须在关键字参数之前（后使用关键字参数）。</p><p><strong>③默认参数</strong>：调用时，可不传入参数，则为默认值。定义时，要全部放在后面位置。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230703231745980.png" alt="image-20230703231745980" style="zoom:50%;"><p><code>help()</code>方法获取函数的建议使用说明</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230703232247935.png" alt="image-20230703232247935" style="zoom:50%;"><p><strong>特殊点</strong>：定义时参数使用<code>*</code>，表示左侧的参数任意方法传入，但右侧参数必须使用关键字参数传入。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230703232516699.png" alt="image-20230703232516699" style="zoom:50%;"><p><strong>④收集参数</strong>：类比于<code>print</code>函数，可以同时接收不确定的多个参数，定义时，形式参数前加上<code>*</code>，如下所示，调用函数时，相当于把参数<strong>全部打包为一个元组</strong>，传入函数。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704220926059.png" alt="image-20230704220926059" style="zoom:50%;"><p>当<strong>同时</strong>写<strong>收集参数</strong>和<strong>位置参数</strong>和<strong>关键字参数</strong>时，必须按照位置参数在前、收集参数其次、关键字参数最后的顺序，才能使函数有序传入参数。如下图：</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704222228979.png" alt="image-20230704222228979" style="zoom:50%;"><p>若要<strong>以字典形式</strong>传入多个收集参数，则采用<code>**</code>的形式</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704223005363.png" alt="image-20230704223005363" style="zoom:50%;"><p>若多种方式传入，则以字典形式传入只能放在最后的顺序，传入参数。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704223153752.png" alt="image-20230704223153752" style="zoom:50%;"><p>例如：字符串的<code>format</code>方法，即同时拥有元组形式和字典形式手机参数的函数。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704224844006.png" alt="image-20230704224844006" style="zoom:50%;"><p><strong>⑤解包参数</strong>：指在函数调用时，在<strong>实参</strong>前面加上<code>*</code>，表示将实参<strong>按照元组</strong>解包，依次传入；而在实参前面加上<code>**</code>，表示将实参<strong>按照字典</strong>解包，依次传入。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704225629217.png" alt="image-20230704225629217" style="zoom:50%;"><img src="https://gitee.com/cht1/Image/raw/master/image-20230704225646293.png" alt="image-20230704225646293" style="zoom:50%;"><h4 id="（2）作用域"><a href="#（2）作用域" class="headerlink" title="（2）作用域"></a>（2）作用域</h4><p>作用域主要指：<strong>局部变量</strong>和<strong>全局变量</strong></p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704233138295.png" alt="image-20230704233138295" style="zoom:50%;"><p><strong>global语句</strong>：在函数内部，使用全局变量时，相当于在函数内部创建了一个<strong>同名局部变量</strong>，并不会修改外部全局变量的值。若要修改，可以使用**<code>global</code>**关键字，明确表示修改外部全局变量。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704233602276.png" alt="image-20230704233602276" style="zoom:50%;"><p><strong>函数嵌套</strong>：如下图，函数<code>funA</code>嵌套函数<code>funB</code>，在函数<code>funA</code>外部，无法调用函数<code>funB</code>。</p><blockquote><p>嵌套函数是<strong>闭包</strong>和<strong>装饰器</strong>的基础</p></blockquote><img src="https://gitee.com/cht1/Image/raw/master/image-20230704233852865.png" alt="image-20230704233852865" style="zoom:50%;"><p><strong>nonlocal语句</strong>：允许<strong>嵌套函数</strong>使用<strong>外部函数的局部变量</strong>，且允许修改。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230704234301568.png" alt="image-20230704234301568" style="zoom:50%;"><p><strong>LEGB规则</strong>：表示作用域优先级，由高到低。</p><blockquote><p>Local：局部作用域；</p><p>Enclosed：嵌套函数的外层作用域， </p><p>Global：全局作用域， </p><p>Build-in：内置作用域。 </p></blockquote><h4 id="（3）函数闭包"><a href="#（3）函数闭包" class="headerlink" title="（3）函数闭包"></a>（3）函数闭包</h4><p>将嵌套函数作为函数的范围值（函数的返回值为函数）。</p><img src="../../../../../AppData/Roaming/Typora/typora-user-images/image-20230705221456822.png" alt="image-20230705221456822" style="zoom:50%;"><p>如上图，在嵌套函数内部访问外层函数变量，再返回内部嵌套函数并调用，则成为<strong>闭包</strong>。调用函数<code>funA</code>时，返回函数<code>funB</code>，此时<code>funB</code>内部的<code>x</code>值类似于仅对于<code>funB</code>的<strong>静态变量</strong>（C语言），生命周期变长，随程序结束而结束。如下图：</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705222708975.png" alt="image-20230705222708975" style="zoom:50%;"><p>闭包常用于控制变量访问。</p><h4 id="（4）装饰器"><a href="#（4）装饰器" class="headerlink" title="（4）装饰器"></a>（4）装饰器</h4><p>添加<strong>装饰器</strong>的函数，再调用函数时，相当于先将函数当作参数传入装饰器，再调用起返回值。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705225335050.png" alt="image-20230705225335050" style="zoom:50%;"><p><strong>多个装饰器</strong>，则<strong>从下往上</strong>，依次调用。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705225701835.png" alt="image-20230705225701835" style="zoom:50%;"><p><strong>进阶</strong>：给装饰器传参：</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705225924214.png" alt="image-20230705225924214" style="zoom:50%;"><h4 id="（5）lambda表达式"><a href="#（5）lambda表达式" class="headerlink" title="（5）lambda表达式"></a>（5）lambda表达式</h4><p><strong>lambda表达式</strong>，类似于C语言里的<code>#define add(x,y) x+y</code>，可以用于简化语句。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705232238945.png" alt="image-20230705232238945" style="zoom:50%;"><p>一些奇怪但不常用的使用方法</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705232352686.png" alt="image-20230705232352686" style="zoom:50%;"><h4 id="（6）生成器：yield表达式"><a href="#（6）生成器：yield表达式" class="headerlink" title="（6）生成器：yield表达式"></a>（6）生成器：yield表达式</h4><p>不同于列表、元组这种可迭代对象（一次性返回所有指），<strong>生成器表达式yeild</strong>使元素一次返回一个（通过<code>next()</code>方法），直到所有返回完。</p><p>如果用于定义的函数内，则使函数变为一个生成器，每次调用，执行一次函数，并返回<code>yield</code>对于变量的值。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705233940019.png" alt="image-20230705233940019" style="zoom:50%;"><p>用<strong>生成器yield</strong>求斐波那契数列</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705234222043.png" alt="image-20230705234222043" style="zoom:50%;"><p>类比<strong>列表推导式</strong>，实现生成器推导式。</p><img src="https://gitee.com/cht1/Image/raw/master/image-20230705234553129.png" alt="image-20230705234553129" style="zoom:50%;"><h4 id="（7）函数递归"><a href="#（7）函数递归" class="headerlink" title="（7）函数递归"></a>（7）函数递归</h4>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.16-【文章摘录】- 机器学习入门</title>
    <link href="/2023/04/16/2023.4.16-%E3%80%90%E6%96%87%E7%AB%A0%E6%91%98%E5%BD%95%E3%80%91-%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    <url>/2023/04/16/2023.4.16-%E3%80%90%E6%96%87%E7%AB%A0%E6%91%98%E5%BD%95%E3%80%91-%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>最近入门机器学习，记录一些文章及其摘录。</p><span id="more"></span><h1 id="4-16-【文章摘录】-机器学习入门"><a href="#4-16-【文章摘录】-机器学习入门" class="headerlink" title="4.16-【文章摘录】- 机器学习入门"></a>4.16-【文章摘录】- 机器学习入门</h1><p>[toc]</p><h4 id="机器学习入门"><a href="#机器学习入门" class="headerlink" title="机器学习入门"></a><a href="https://klose911.github.io/html/ml/intro.html">机器学习入门</a></h4><p>较<strong>科普性</strong>的文章，介绍了机器学习的<strong>各个方向</strong>及<strong>热门算法</strong>，对入门了解很友好。</p><blockquote><p>热门算法包括：</p><p>回归算法<br>神经网络<br>SVM算法<br>聚类算法<br>降维算法<br>推荐算法<br>其他算法</p></blockquote><h4 id="EasyAI-blog：AI知识库"><a href="#EasyAI-blog：AI知识库" class="headerlink" title="EasyAI blog：AI知识库"></a><a href="https://easyai.tech/ai-definition/">EasyAI blog：AI知识库</a></h4><blockquote><p>一个关于人工智能的综合博客</p></blockquote><h4 id="人工智能-–-Artificial-intelligence-AI"><a href="#人工智能-–-Artificial-intelligence-AI" class="headerlink" title="人工智能 – Artificial intelligence | AI"></a><a href="https://easyai.tech/ai-definition/ai/">人工智能 – Artificial intelligence | AI</a></h4><blockquote><p>人工智能<strong>科普性</strong>文章，讲述以下几点（目录）：</p><ul><li><a href="https://easyai.tech/ai-definition/ai/#what">什么是人工智能？</a></li><li><a href="https://easyai.tech/ai-definition/ai/#history">人工智能的发展历史</a></li><li><a href="https://easyai.tech/ai-definition/ai/#cant">人工智能不能做什么？</a></li><li><a href="https://easyai.tech/ai-definition/ai/#shiye">人工智能会让你失业吗？</a></li><li><a href="https://easyai.tech/ai-definition/ai/#zongjie">总结</a><ol><li>人工智能本质上是一种工具</li><li>人工智能技能只能解决特定的问题，而不是什么都能做</li><li>人工智能属于归纳逻辑，可以告诉你是什么，但是不能告诉你为什么</li></ol></li><li><a href="https://easyai.tech/ai-definition/ai/#2020">「附」2020 AI 发展趋势</a></li></ul></blockquote><h4 id="训练集、验证集、测试集（附：分割方法-交叉验证）"><a href="#训练集、验证集、测试集（附：分割方法-交叉验证）" class="headerlink" title="训练集、验证集、测试集（附：分割方法+交叉验证）"></a><a href="https://easyai.tech/ai-definition/3dataset-and-cross-validation/">训练集、验证集、测试集（附：分割方法+交叉验证）</a></h4><blockquote><p>如题，介绍基础知识，训练集、验证集、测试集。</p><p>数据分割方法：</p><ul><li>小规模样本集（几万量级），常用的分配比例是 60% 训练集、20% 验证集、20% 测试集。</li><li>大规模样本集，留 1w 验证集和 1w 测试集。</li></ul><p>同时介绍交叉验证方法</p><ul><li><strong>留出法（Holdout cross validation）</strong></li><li><strong>留一法（Leave one out cross validation）</strong></li><li><strong>k 折交叉验证（k-fold cross validation）</strong></li></ul></blockquote><h4 id="分类模型评估指标——准确率、精准率、召回率、F1、ROC曲线、AUC曲线"><a href="#分类模型评估指标——准确率、精准率、召回率、F1、ROC曲线、AUC曲线" class="headerlink" title="分类模型评估指标——准确率、精准率、召回率、F1、ROC曲线、AUC曲线"></a><a href="https://easyai.tech/ai-definition/accuracy-precision-recall-f1-roc-auc/">分类模型评估指标——准确率、精准率、召回率、F1、ROC曲线、AUC曲线</a></h4><blockquote><p>机器学习模型需要有量化的评估指标来评估哪些模型的效果更好。</p><p>本文将用通俗易懂的方式讲解分类问题的混淆矩阵和各种评估指标的计算公式。将要给大家介绍的评估指标有：准确率、精准率、召回率、F1、ROC曲线、AUC曲线。</p><p><strong>问题：</strong>不太懂F1、ROC曲线、AUC曲线。另外的指标也不熟悉。</p></blockquote><h4 id="无监督学习-–-Unsupervised-learning-UL"><a href="#无监督学习-–-Unsupervised-learning-UL" class="headerlink" title="无监督学习 – Unsupervised learning | UL"></a><a href="https://easyai.tech/ai-definition/unsupervised-learning/">无监督学习 – Unsupervised learning | UL</a></h4><blockquote><p>无监督学习是机器学习领域内的一种学习方式。本文将给大家解释他的基本概念，告诉大家无监督学习可以用用到哪些具体场景中。</p><p>最后给大家举例说明2类无监督学习的思维：聚类、降维。以及具体的4种算法</p></blockquote><h4 id="监督学习-–-Supervised-learning"><a href="#监督学习-–-Supervised-learning" class="headerlink" title="监督学习 – Supervised learning"></a><a href="https://easyai.tech/ai-definition/supervised-learning/">监督学习 – Supervised learning</a></h4><blockquote><p><strong>监督学习需要有明确的目标，很清楚自己想要什么结果</strong>。比如：按照“既定规则”来分类、预测某个具体的值…</p><p>即给数据集打上标签后，再训练模型</p></blockquote><h4 id="机器学习-–-machine-learning-ML"><a href="#机器学习-–-machine-learning-ML" class="headerlink" title="机器学习 – machine learning | ML"></a><a href="https://easyai.tech/ai-definition/machine-learning/">机器学习 – machine learning | ML</a></h4><blockquote><p>同样是<strong>科普类文章</strong>，总览<strong>介绍</strong>机器学习。</p><p>Field of study that gives computers the ability to learn without being explicitly programmed.</p><p>机器学习分为<strong>三大类</strong>：</p><ol><li>监督学习</li><li>非监督学习</li><li>强化学习</li></ol><p><strong>7个步骤</strong>：</p><p><img src="https://easyai.tech/wp-content/uploads/2018/12/7steps-ml.png" alt="机器学习的7个步骤"></p></blockquote><h4 id="深度学习-–-Deep-learning-DL"><a href="#深度学习-–-Deep-learning-DL" class="headerlink" title="深度学习 – Deep learning | DL"></a><a href="https://easyai.tech/ai-definition/deep-learning/">深度学习 – Deep learning | DL</a></h4><blockquote><p>深度学习有很好的表现，引领了第三次人工智能的浪潮。目前大部分表现优异的应用都用到了深度学习，大红大紫的 AlphaGo 就使用到了深度学习。</p><p>本文将详细的给大家介绍深度学习的基本概念、优缺点和主流的几种算法。</p></blockquote><h4 id="生成对抗网络-–-Generative-Adversarial-Networks-GAN"><a href="#生成对抗网络-–-Generative-Adversarial-Networks-GAN" class="headerlink" title="生成对抗网络 – Generative Adversarial Networks | GAN"></a><a href="https://easyai.tech/ai-definition/gan/">生成对抗网络 – Generative Adversarial Networks | GAN</a></h4><blockquote><p>生成对抗网络 – GAN 是最近2年很热门的一种无监督算法，他能生成出非常逼真的照片，图像甚至视频。我们手机里的照片处理软件中就会使用到它。</p><p>本文将详细介绍生成对抗网络 – GAN 的设计初衷、基本原理、10种典型算法和13种实际应用。</p><ul><li><p>有生成器G和判别器D</p><p>第一阶段：固定「判别器D」，训练「生成器G」（训练大概是使用强化学习）</p><p>第二阶段：固定「生成器G」，训练「判别器D」</p><p>循环阶段一和阶段二，通过不断的循环，「生成器G」和「判别器D」的能力都越来越强。</p></li></ul></blockquote><h4 id="生成性对抗网络（GAN）初学者指南-–-附代码"><a href="#生成性对抗网络（GAN）初学者指南-–-附代码" class="headerlink" title="生成性对抗网络（GAN）初学者指南 – 附代码"></a><a href="https://easyai.tech/blog/generative-adversarial-networks-gans-a-beginners-guide/">生成性对抗网络（GAN）初学者指南 – 附代码</a></h4><blockquote><p>更详细的<strong>介绍</strong>了GAN，含代码。</p></blockquote><h3 id="干货，看不懂：长文解释生成对抗网络GAN的详细原理（20分钟阅读）"><a href="#干货，看不懂：长文解释生成对抗网络GAN的详细原理（20分钟阅读）" class="headerlink" title="干货，看不懂：长文解释生成对抗网络GAN的详细原理（20分钟阅读）"></a><a href="https://easyai.tech/blog/understanding-generative-adversarial-networks-gans/">干货，看不懂：长文解释生成对抗网络GAN的详细原理（20分钟阅读）</a></h3><blockquote><p>大纲：</p><p>在下面的第一节中，我们将讨论从给定分布生成随机变量的过程。然后，在第2节中，我们将通过一个例子展示GAN试图解决的问题可以表示为随机变量生成问题。在第3节中，我们将讨论基于匹配的生成网络，并展示它们如何回答第2节中描述的问题。最后在第4节中，我们将介绍GAN。更具体地说，我们将展示具有其损失功能的一般架构，并且我们将与之前的所有部分建立链接。</p></blockquote><h4 id="AI-数据集最常见的6大问题（附解决方案）"><a href="#AI-数据集最常见的6大问题（附解决方案）" class="headerlink" title="AI 数据集最常见的6大问题（附解决方案）"></a><a href="https://easyai.tech/blog/ai-dataset-6-problem-solution/">AI 数据集最常见的6大问题（附解决方案）</a></h4><blockquote><ul><li>问题1：数据量不够</li><li>问题2：低质量的分类</li><li>问题3：低质量的数据</li><li>问题4：不平衡的分类</li><li>问题5：数据不平衡</li><li>问题6：没有验证集和测试集</li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人介绍</title>
    <link href="/2023/04/02/2-%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/04/02/2-%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>个人介绍，如何联系我。</p><span id="more"></span><p>我是一名学生</p><p>有问题加我qq：1245885144</p>]]></content>
    
    
    
    <tags>
      
      <tag>个人介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/01/1-hello-world/"/>
    <url>/2023/04/01/1-hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
